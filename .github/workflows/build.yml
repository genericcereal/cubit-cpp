name: Build Cubit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtwebengine qtwebchannel qtpositioning qtwebsockets'
        cache: true
    
    - name: Setup Code Signing
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Verify certificate
        security find-identity -v -p codesigning
    
    - name: Build application
      run: |
        qmake6 -o Makefile cubit-quick.pro
        make -j$(sysctl -n hw.ncpu)
    
    - name: Sign application
      run: |
        # Remove any extended attributes that might interfere
        xattr -cr cubit-quick.app
        
        # Sign with hardened runtime for notarization
        if [ -f entitlements.plist ]; then
          ENTITLEMENTS="--entitlements entitlements.plist"
        else
          ENTITLEMENTS=""
        fi
        
        codesign --deep --force --verify --verbose \
          --sign "${{ secrets.APPLE_DEVELOPER_ID }}" \
          --options runtime \
          $ENTITLEMENTS \
          cubit-quick.app
        
        # Verify signature
        codesign --verify --deep --strict --verbose=2 cubit-quick.app
    
    - name: Calculate app bundle hash
      id: app_hash
      run: |
        # Calculate hash of the app bundle (excluding variable metadata)
        APP_HASH=$(find cubit-quick.app -type f -name "*.dylib" -o -name "*.framework" -o -name "cubit-quick" | 
                   xargs shasum -a 256 | 
                   sort | 
                   shasum -a 256 | 
                   cut -d' ' -f1)
        echo "hash=$APP_HASH" >> $GITHUB_OUTPUT
        echo "App bundle hash: $APP_HASH"
    
    - name: Check notarization cache
      id: cache_check
      uses: actions/cache@v4
      with:
        path: |
          cubit-quick-notarized.dmg
          .notarization-complete
        key: notarized-dmg-${{ steps.app_hash.outputs.hash }}
        restore-keys: |
          notarized-dmg-
    
    - name: Package application
      if: steps.cache_check.outputs.cache-hit != 'true'
      run: |
        macdeployqt cubit-quick.app -dmg
        
        # Sign the DMG
        codesign --force --sign "${{ secrets.APPLE_DEVELOPER_ID }}" cubit-quick.dmg
    
    - name: Notarize application
      if: steps.cache_check.outputs.cache-hit != 'true'
      timeout-minutes: 180  # 3 hour timeout for the step itself
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "=== NOTARIZATION DEBUGGING START ==="
        echo "Starting notarization process at $(date)"
        
        # Check environment
        echo "=== ENVIRONMENT CHECK ==="
        echo "Apple ID present: $([[ -n "$APPLE_ID" ]] && echo "YES" || echo "NO")"
        echo "Apple ID length: ${#APPLE_ID}"
        echo "Password present: $([[ -n "$APPLE_ID_PASSWORD" ]] && echo "YES" || echo "NO")"
        echo "Password length: ${#APPLE_ID_PASSWORD}"
        echo "Team ID: $APPLE_TEAM_ID"
        echo "Team ID length: ${#APPLE_TEAM_ID}"
        
        # Check Xcode and notarytool versions
        echo "=== TOOL VERSIONS ==="
        echo "Xcode version:"
        xcodebuild -version
        echo "Xcode path:"
        xcode-select -p
        echo "notarytool location:"
        which notarytool || echo "notarytool not in PATH"
        echo "xcrun notarytool version:"
        xcrun notarytool --version || echo "Failed to get notarytool version"
        
        # Verify DMG exists and show detailed info
        echo "=== DMG FILE INFO ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "DMG file details:"
        ls -la cubit-quick.dmg
        file cubit-quick.dmg
        echo "DMG size: $(du -h cubit-quick.dmg | cut -f1)"
        echo "DMG MD5: $(md5 -q cubit-quick.dmg || md5sum cubit-quick.dmg | cut -d' ' -f1)"
        
        # Test authentication first
        echo "=== TESTING AUTHENTICATION ==="
        echo "Testing notarytool authentication..."
        AUTH_TEST=$(xcrun notarytool history \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --output-format json 2>&1)
        AUTH_EXIT_CODE=$?
        echo "Authentication test exit code: $AUTH_EXIT_CODE"
        echo "Authentication test output (first 500 chars): ${AUTH_TEST:0:500}"
        
        if [ $AUTH_EXIT_CODE -ne 0 ]; then
          echo "WARNING: Authentication test failed, but continuing..."
        fi
        
        # Submit for notarization with verbose output
        echo "=== SUBMITTING FOR NOTARIZATION ==="
        echo "Submitting DMG for notarization at $(date)..."
        echo "Command: xcrun notarytool submit cubit-quick.dmg --apple-id [REDACTED] --password [REDACTED] --team-id $APPLE_TEAM_ID --output-format json"
        
        # Capture both stdout and stderr
        SUBMISSION_OUTPUT=$(xcrun notarytool submit cubit-quick.dmg \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --output-format json 2>&1)
        SUBMISSION_EXIT_CODE=$?
        
        echo "Submission exit code: $SUBMISSION_EXIT_CODE"
        echo "Submission output: $SUBMISSION_OUTPUT"
        
        # Try to extract submission ID even if exit code is non-zero
        SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | jq -r '.id' 2>/dev/null || echo "")
        
        if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ]; then
          echo "ERROR: Failed to get submission ID from notarytool"
          echo "Full raw output:"
          echo "$SUBMISSION_OUTPUT"
          
          # Try alternative parsing
          echo "Trying alternative ID extraction..."
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 || echo "")
          echo "Alternative extraction result: '$SUBMISSION_ID'"
          
          if [ -z "$SUBMISSION_ID" ]; then
            exit 1
          fi
        fi
        
        echo "Successfully got submission ID: $SUBMISSION_ID"
        
        # Poll for notarization status with detailed logging
        START_TIME=$(date +%s)
        TIMEOUT=10800  # 3 hours in seconds
        POLL_INTERVAL=30  # Check every 30 seconds
        CHECK_COUNT=0
        
        echo "=== POLLING FOR STATUS ==="
        echo "Will check every $POLL_INTERVAL seconds for up to $((TIMEOUT / 60)) minutes"
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          CHECK_COUNT=$((CHECK_COUNT + 1))
          
          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "ERROR: Notarization timed out after $((ELAPSED / 60)) minutes"
            echo "Total checks performed: $CHECK_COUNT"
            
            # Get the log for debugging
            echo "=== FETCHING FINAL LOG ==="
            echo "Fetching notarization log at $(date)..."
            LOG_OUTPUT=$(xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_ID_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" 2>&1)
            echo "Log output:"
            echo "$LOG_OUTPUT"
            
            exit 1
          fi
          
          echo "=== STATUS CHECK #$CHECK_COUNT ==="
          echo "Time: $(date)"
          echo "Elapsed: $((ELAPSED / 60)) minutes $((ELAPSED % 60)) seconds"
          echo "Checking notarization status..."
          
          STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --output-format json 2>&1)
          STATUS_EXIT_CODE=$?
          
          echo "Status check exit code: $STATUS_EXIT_CODE"
          
          # Extract status even if exit code is non-zero
          STATUS=$(echo "$STATUS_OUTPUT" | jq -r '.status' 2>/dev/null || echo "")
          
          if [ -z "$STATUS" ]; then
            echo "WARNING: Could not extract status from output"
            echo "Raw output: $STATUS_OUTPUT"
            STATUS=$(echo "$STATUS_OUTPUT" | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo "Unknown")
          fi
          
          echo "Current status: $STATUS"
          echo "Full status output: $STATUS_OUTPUT"
          
          case "$STATUS" in
            "Accepted")
              echo "SUCCESS: Notarization accepted!"
              echo "Total time: $((ELAPSED / 60)) minutes $((ELAPSED % 60)) seconds"
              break
              ;;
            "Rejected"|"Invalid")
              echo "ERROR: Notarization failed with status: $STATUS"
              echo "Full status output: $STATUS_OUTPUT"
              
              # Get the log for debugging
              echo "=== FETCHING ERROR LOG ==="
              echo "Fetching notarization log..."
              LOG_OUTPUT=$(xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" 2>&1)
              echo "Log output:"
              echo "$LOG_OUTPUT"
              
              exit 1
              ;;
            "In Progress")
              echo "Status: Still in progress..."
              
              # Every 10 checks, try to get more info
              if [ $((CHECK_COUNT % 10)) -eq 0 ]; then
                echo "=== EXTENDED STATUS CHECK ==="
                echo "Attempting to get submission history..."
                HISTORY_OUTPUT=$(xcrun notarytool history \
                  --apple-id "$APPLE_ID" \
                  --password "$APPLE_ID_PASSWORD" \
                  --team-id "$APPLE_TEAM_ID" \
                  --output-format json 2>&1 | jq ".history[] | select(.id==\"$SUBMISSION_ID\")" 2>/dev/null || echo "{}")
                echo "Submission history entry: $HISTORY_OUTPUT"
              fi
              
              sleep $POLL_INTERVAL
              ;;
            *)
              echo "WARNING: Unknown or unexpected status: $STATUS"
              echo "Full output: $STATUS_OUTPUT"
              
              # If we get connection errors, add exponential backoff
              if [[ "$STATUS_OUTPUT" == *"connection"* ]] || [[ "$STATUS_OUTPUT" == *"timeout"* ]]; then
                echo "Detected possible connection issue, increasing wait time..."
                POLL_INTERVAL=$((POLL_INTERVAL * 2))
                if [ $POLL_INTERVAL -gt 300 ]; then
                  POLL_INTERVAL=300  # Cap at 5 minutes
                fi
                echo "New poll interval: $POLL_INTERVAL seconds"
              fi
              
              sleep $POLL_INTERVAL
              ;;
          esac
        done
        
        # Staple the notarization
        echo "=== STAPLING NOTARIZATION ==="
        echo "Stapling notarization to DMG at $(date)..."
        STAPLE_OUTPUT=$(xcrun stapler staple cubit-quick.dmg 2>&1)
        STAPLE_EXIT_CODE=$?
        echo "Staple exit code: $STAPLE_EXIT_CODE"
        echo "Staple output: $STAPLE_OUTPUT"
        
        # Verify the stapling
        echo "=== VERIFYING STAPLED DMG ==="
        echo "Verifying stapled DMG..."
        VALIDATE_OUTPUT=$(xcrun stapler validate cubit-quick.dmg 2>&1)
        VALIDATE_EXIT_CODE=$?
        echo "Validate exit code: $VALIDATE_EXIT_CODE"
        echo "Validate output: $VALIDATE_OUTPUT"
        
        echo "=== NOTARIZATION DEBUGGING END ==="
        echo "Notarization process completed at $(date)"
        
        # Save notarized DMG for caching
        cp cubit-quick.dmg cubit-quick-notarized.dmg
        touch .notarization-complete
    
    - name: Use cached notarized DMG
      if: steps.cache_check.outputs.cache-hit == 'true'
      run: |
        echo "Using cached notarized DMG"
        cp cubit-quick-notarized.dmg cubit-quick.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-macos
        path: cubit-quick.dmg
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtwebengine qtwebchannel qtpositioning qtwebsockets'
        cache: true
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Build application
      run: |
        qmake cubit-quick.pro
        nmake
    
    - name: Package application
      run: |
        windeployqt --release --dir deploy release\cubit-quick.exe
        copy release\cubit-quick.exe deploy\
    
    - name: Create installer (optional)
      run: |
        # You can add NSIS or other installer creation here
        # For now, we'll just package the deployed files
        Compress-Archive -Path deploy\* -DestinationPath cubit-windows.zip
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-windows
        path: cubit-windows.zip
        retention-days: 7

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Build ${{ github.run_number }}
        draft: false
        prerelease: true
        files: |
          artifacts/cubit-macos/cubit-quick.dmg
          artifacts/cubit-windows/cubit-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}