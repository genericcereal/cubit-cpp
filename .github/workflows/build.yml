name: Build Cubit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4  # Update to v4 for better Qt 6.9 support
      with:
        version: '6.9.0'  # Match local development environment
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtwebengine qtwebchannel qtpositioning qtwebsockets'
        cache: true
    
    - name: Setup Code Signing
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Verify certificate
        security find-identity -v -p codesigning
    
    - name: Build application
      run: |
        qmake6 -o Makefile cubit-quick.pro
        make -j$(sysctl -n hw.ncpu)
    
    - name: Deploy and sign application
      run: |
        set -e
        echo "=== Preparing Qt deployment ==="

        # Remove extended attributes (prevents code signing issues)
        xattr -cr cubit-quick.app

        # Find Qt installation path
        QT_PATH=$(qmake6 -query QT_INSTALL_PREFIX)
        echo "Qt installation path: $QT_PATH"

        echo "=== Scanning QML dependencies ==="
        # qmlimportscanner might be in PATH or in Qt bin directory
        QT_BIN_PATH="$QT_PATH/bin"
        echo "Qt bin path: $QT_BIN_PATH"
        
        # Try to find qmlimportscanner in multiple locations
        QMLIMPORTSCANNER=$(command -v qmlimportscanner || echo "$QT_BIN_PATH/qmlimportscanner")
        
        if [ -x "$QMLIMPORTSCANNER" ]; then
          echo "Found qmlimportscanner at: $QMLIMPORTSCANNER"
          "$QMLIMPORTSCANNER" -rootPath qml -importPath "$QT_PATH/qml" > qml_imports.json
          echo "Generated QML imports list:"
          cat qml_imports.json
        else
          echo "WARNING: qmlimportscanner not found, bundling may be incomplete"
          echo "Searched in PATH and at: $QT_BIN_PATH/qmlimportscanner"
          echo "[]" > qml_imports.json
        fi

        echo "=== Running macdeployqt ==="
        # NOTE: For Qt 6, always use -qmldir (NOT -qmlimport)
        MACDEPLOYQT="$QT_BIN_PATH/macdeployqt"
        if [ ! -f "$MACDEPLOYQT" ]; then
          echo "ERROR: macdeployqt not found at $MACDEPLOYQT"
          exit 1
        fi
        
        "$MACDEPLOYQT" cubit-quick.app \
          -qmldir=qml \
          -always-overwrite \
          -verbose=1

        echo "=== Ensuring QtWebEngineProcess.app is bundled ==="
        WEBENGINE_HELPER="$QT_PATH/libexec/QtWebEngineProcess.app"
        TARGET_HELPER="cubit-quick.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app"
        if [ ! -d "$TARGET_HELPER" ]; then
          echo "QtWebEngineProcess.app missing, copying..."
          mkdir -p "$(dirname "$TARGET_HELPER")"
          cp -R "$WEBENGINE_HELPER" "$(dirname "$TARGET_HELPER")/"
        else
          echo "QtWebEngineProcess.app already present"
        fi

        echo "=== Checking signing identity ==="
        security find-identity -v -p codesigning

        # Sign the app bundle first
        echo "=== Code signing application bundle ==="
        codesign --deep --force --verify --verbose \
          --sign "${{ secrets.APPLE_DEVELOPER_ID }}" \
          --options runtime \
          --timestamp \
          cubit-quick.app
        
        # Create DMG separately (faster than using macdeployqt)
        echo "=== Creating DMG ==="
        hdiutil create -volname "Cubit" -srcfolder cubit-quick.app -ov -format UDZO cubit-quick.dmg

        echo "=== Verifying app bundle signature ==="
        codesign --verify --deep --strict --verbose=2 cubit-quick.app

        echo "=== Signing DMG ==="
        codesign --force --sign "${{ secrets.APPLE_DEVELOPER_ID }}" \
          --timestamp \
          cubit-quick.dmg

        echo "=== Verifying DMG signature ==="
        codesign --verify --verbose=2 cubit-quick.dmg

        echo "=== Checking all binaries are signed ==="
        UNSIGNED_FILES=""
        while IFS= read -r file; do
          if file "$file" | grep -q "Mach-O"; then
            if ! codesign -v "$file" 2>/dev/null; then
              echo "ERROR: Unsigned binary found: $file"
              UNSIGNED_FILES="${UNSIGNED_FILES}${file}\n"
            fi
          fi
        done < <(find cubit-quick.app -type f)

        if [ -n "$UNSIGNED_FILES" ]; then
          echo "ERROR: Found unsigned binaries!"
          echo -e "$UNSIGNED_FILES"
          exit 1
        fi

        echo "All binaries are properly signed."

    
    - name: Calculate app bundle hash
      id: app_hash
      run: |
        # Calculate hash of the app bundle (excluding variable metadata)
        APP_HASH=$(find cubit-quick.app -type f -name "*.dylib" -o -name "*.framework" -o -name "cubit-quick" | 
                   xargs shasum -a 256 | 
                   sort | 
                   shasum -a 256 | 
                   cut -d' ' -f1)
        echo "hash=$APP_HASH" >> $GITHUB_OUTPUT
        echo "App bundle hash: $APP_HASH"
    
    - name: Check notarization cache
      id: cache_check
      uses: actions/cache@v4
      with:
        path: |
          cubit-quick-notarized.dmg
          .notarization-complete
        key: notarized-dmg-${{ steps.app_hash.outputs.hash }}
        restore-keys: |
          notarized-dmg-
    
    - name: Notarize application
      if: steps.cache_check.outputs.cache-hit != 'true'
      timeout-minutes: 180  # 3 hour timeout for the step itself
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "=== NOTARIZATION DEBUGGING START ==="
        echo "Starting notarization process at $(date)"
        
        # Check environment
        echo "=== ENVIRONMENT CHECK ==="
        echo "Apple ID present: $([[ -n "$APPLE_ID" ]] && echo "YES" || echo "NO")"
        echo "Apple ID length: ${#APPLE_ID}"
        echo "Password present: $([[ -n "$APPLE_ID_PASSWORD" ]] && echo "YES" || echo "NO")"
        echo "Password length: ${#APPLE_ID_PASSWORD}"
        echo "Team ID: $APPLE_TEAM_ID"
        echo "Team ID length: ${#APPLE_TEAM_ID}"
        
        # Check Xcode and notarytool versions
        echo "=== TOOL VERSIONS ==="
        echo "Xcode version:"
        xcodebuild -version
        echo "Xcode path:"
        xcode-select -p
        echo "notarytool location:"
        which notarytool || echo "notarytool not in PATH"
        echo "xcrun notarytool version:"
        xcrun notarytool --version || echo "Failed to get notarytool version"
        
        # Verify DMG exists and show detailed info
        echo "=== DMG FILE INFO ==="
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "DMG file details:"
        ls -la cubit-quick.dmg
        file cubit-quick.dmg
        echo "DMG size: $(du -h cubit-quick.dmg | cut -f1)"
        echo "DMG MD5: $(md5 -q cubit-quick.dmg || md5sum cubit-quick.dmg | cut -d' ' -f1)"
        
        # Test authentication first
        echo "=== TESTING AUTHENTICATION ==="
        echo "Testing notarytool authentication..."
        AUTH_TEST=$(xcrun notarytool history \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --output-format json 2>&1)
        AUTH_EXIT_CODE=$?
        echo "Authentication test exit code: $AUTH_EXIT_CODE"
        echo "Authentication test output (first 500 chars): ${AUTH_TEST:0:500}"
        
        if [ $AUTH_EXIT_CODE -ne 0 ]; then
          echo "WARNING: Authentication test failed, but continuing..."
        fi
        
        # Submit for notarization with verbose output
        echo "=== SUBMITTING FOR NOTARIZATION ==="
        echo "Submitting DMG for notarization at $(date)..."
        echo "Command: xcrun notarytool submit cubit-quick.dmg --apple-id [REDACTED] --password [REDACTED] --team-id $APPLE_TEAM_ID --output-format json"
        
        # Capture both stdout and stderr
        SUBMISSION_OUTPUT=$(xcrun notarytool submit cubit-quick.dmg \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --output-format json 2>&1)
        SUBMISSION_EXIT_CODE=$?
        
        echo "Submission exit code: $SUBMISSION_EXIT_CODE"
        echo "Submission output: $SUBMISSION_OUTPUT"
        
        # Try to extract submission ID even if exit code is non-zero
        SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | jq -r '.id' 2>/dev/null || echo "")
        
        if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ]; then
          echo "ERROR: Failed to get submission ID from notarytool"
          echo "Full raw output:"
          echo "$SUBMISSION_OUTPUT"
          
          # Try alternative parsing
          echo "Trying alternative ID extraction..."
          SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 || echo "")
          echo "Alternative extraction result: '$SUBMISSION_ID'"
          
          if [ -z "$SUBMISSION_ID" ]; then
            exit 1
          fi
        fi
        
        echo "Successfully got submission ID: $SUBMISSION_ID"
        
        # Poll for notarization status with detailed logging
        START_TIME=$(date +%s)
        TIMEOUT=10800  # 3 hours in seconds
        POLL_INTERVAL=30  # Check every 30 seconds
        CHECK_COUNT=0
        
        echo "=== POLLING FOR STATUS ==="
        echo "Will check every $POLL_INTERVAL seconds for up to $((TIMEOUT / 60)) minutes"
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          CHECK_COUNT=$((CHECK_COUNT + 1))
          
          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "ERROR: Notarization timed out after $((ELAPSED / 60)) minutes"
            echo "Total checks performed: $CHECK_COUNT"
            
            # Get the log for debugging
            echo "=== FETCHING FINAL LOG ==="
            echo "Fetching notarization log at $(date)..."
            LOG_OUTPUT=$(xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_ID_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" 2>&1)
            echo "Log output:"
            echo "$LOG_OUTPUT"
            
            exit 1
          fi
          
          echo "=== STATUS CHECK #$CHECK_COUNT ==="
          echo "Time: $(date)"
          echo "Elapsed: $((ELAPSED / 60)) minutes $((ELAPSED % 60)) seconds"
          echo "Checking notarization status..."
          
          STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --output-format json 2>&1)
          STATUS_EXIT_CODE=$?
          
          echo "Status check exit code: $STATUS_EXIT_CODE"
          
          # Extract status even if exit code is non-zero
          STATUS=$(echo "$STATUS_OUTPUT" | jq -r '.status' 2>/dev/null || echo "")
          
          if [ -z "$STATUS" ]; then
            echo "WARNING: Could not extract status from output"
            echo "Raw output: $STATUS_OUTPUT"
            STATUS=$(echo "$STATUS_OUTPUT" | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo "Unknown")
          fi
          
          echo "Current status: $STATUS"
          echo "Full status output: $STATUS_OUTPUT"
          
          case "$STATUS" in
            "Accepted")
              echo "SUCCESS: Notarization accepted!"
              echo "Total time: $((ELAPSED / 60)) minutes $((ELAPSED % 60)) seconds"
              break
              ;;
            "Rejected"|"Invalid")
              echo "ERROR: Notarization failed with status: $STATUS"
              echo "Full status output: $STATUS_OUTPUT"
              
              # Get the log for debugging
              echo "=== FETCHING ERROR LOG ==="
              echo "Fetching notarization log..."
              LOG_OUTPUT=$(xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" 2>&1)
              echo "Log output:"
              echo "$LOG_OUTPUT"
              
              exit 1
              ;;
            "In Progress")
              echo "Status: Still in progress..."
              
              # Every 10 checks, try to get more info
              if [ $((CHECK_COUNT % 10)) -eq 0 ]; then
                echo "=== EXTENDED STATUS CHECK ==="
                echo "Attempting to get submission history..."
                HISTORY_OUTPUT=$(xcrun notarytool history \
                  --apple-id "$APPLE_ID" \
                  --password "$APPLE_ID_PASSWORD" \
                  --team-id "$APPLE_TEAM_ID" \
                  --output-format json 2>&1 | jq ".history[] | select(.id==\"$SUBMISSION_ID\")" 2>/dev/null || echo "{}")
                echo "Submission history entry: $HISTORY_OUTPUT"
              fi
              
              sleep $POLL_INTERVAL
              ;;
            *)
              echo "WARNING: Unknown or unexpected status: $STATUS"
              echo "Full output: $STATUS_OUTPUT"
              
              # If we get connection errors, add exponential backoff
              if [[ "$STATUS_OUTPUT" == *"connection"* ]] || [[ "$STATUS_OUTPUT" == *"timeout"* ]]; then
                echo "Detected possible connection issue, increasing wait time..."
                POLL_INTERVAL=$((POLL_INTERVAL * 2))
                if [ $POLL_INTERVAL -gt 300 ]; then
                  POLL_INTERVAL=300  # Cap at 5 minutes
                fi
                echo "New poll interval: $POLL_INTERVAL seconds"
              fi
              
              sleep $POLL_INTERVAL
              ;;
          esac
        done
        
        # Staple the notarization
        echo "=== STAPLING NOTARIZATION ==="
        echo "Stapling notarization to DMG at $(date)..."
        STAPLE_OUTPUT=$(xcrun stapler staple cubit-quick.dmg 2>&1)
        STAPLE_EXIT_CODE=$?
        echo "Staple exit code: $STAPLE_EXIT_CODE"
        echo "Staple output: $STAPLE_OUTPUT"
        
        # Verify the stapling
        echo "=== VERIFYING STAPLED DMG ==="
        echo "Verifying stapled DMG..."
        VALIDATE_OUTPUT=$(xcrun stapler validate cubit-quick.dmg 2>&1)
        VALIDATE_EXIT_CODE=$?
        echo "Validate exit code: $VALIDATE_EXIT_CODE"
        echo "Validate output: $VALIDATE_OUTPUT"
        
        echo "=== NOTARIZATION DEBUGGING END ==="
        echo "Notarization process completed at $(date)"
        
        # Save notarized DMG for caching
        cp cubit-quick.dmg cubit-quick-notarized.dmg
        touch .notarization-complete
    
    - name: Use cached notarized DMG
      if: steps.cache_check.outputs.cache-hit == 'true'
      run: |
        echo "Using cached notarized DMG"
        cp cubit-quick-notarized.dmg cubit-quick.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-macos
        path: cubit-quick.dmg
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4  # Update to v4 for better Qt 6.9 support
      with:
        version: '6.8.1'  # Use stable version that's available for Windows
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'  # Use MSVC 2022 for better compatibility
        modules: 'qtwebengine qtwebchannel qtpositioning qtwebsockets'
        cache: true
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Build application
      run: |
        qmake cubit-quick.pro
        nmake
    
    - name: Package application
      run: |
        mkdir deploy
        windeployqt --release --qmldir=qml --dir deploy release\cubit-quick.exe
        copy release\cubit-quick.exe deploy\
    
    - name: Install NSIS
      run: |
        choco install nsis -y
        $env:PATH = "C:\Program Files (x86)\NSIS;$env:PATH"
    
    - name: Create installer script
      run: |
        @'
        !include "MUI2.nsh"
        
        Name "Cubit"
        OutFile "cubit-installer.exe"
        InstallDir "$PROGRAMFILES64\Cubit"
        RequestExecutionLevel admin
        
        !define MUI_ABORTWARNING
        
        !insertmacro MUI_PAGE_LICENSE "LICENSE"
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        
        !insertmacro MUI_LANGUAGE "English"
        
        Section "Main"
          SetOutPath "$INSTDIR"
          File /r "deploy\*.*"
          
          WriteUninstaller "$INSTDIR\Uninstall.exe"
          
          ; Create start menu shortcut
          CreateDirectory "$SMPROGRAMS\Cubit"
          CreateShortcut "$SMPROGRAMS\Cubit\Cubit.lnk" "$INSTDIR\cubit-quick.exe"
          CreateShortcut "$SMPROGRAMS\Cubit\Uninstall.lnk" "$INSTDIR\Uninstall.exe"
          
          ; Create desktop shortcut
          CreateShortcut "$DESKTOP\Cubit.lnk" "$INSTDIR\cubit-quick.exe"
          
          ; Write registry keys
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Cubit" "DisplayName" "Cubit"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Cubit" "UninstallString" "$INSTDIR\Uninstall.exe"
        SectionEnd
        
        Section "Uninstall"
          Delete "$INSTDIR\*.*"
          RMDir /r "$INSTDIR"
          Delete "$SMPROGRAMS\Cubit\*.*"
          RMDir "$SMPROGRAMS\Cubit"
          Delete "$DESKTOP\Cubit.lnk"
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Cubit"
        SectionEnd
        '@ | Out-File -Encoding ASCII installer.nsi
    
    - name: Create LICENSE file
      run: |
        @'
        Copyright (c) 2024 Cubit Contributors
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        '@ | Out-File -Encoding ASCII LICENSE
    
    - name: Build installer
      run: |
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-windows
        path: cubit-installer.exe
        retention-days: 7

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Build ${{ github.run_number }}
        draft: false
        prerelease: true
        files: |
          artifacts/cubit-macos/cubit-quick.dmg
          artifacts/cubit-windows/cubit-installer.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}