name: Build Cubit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtwebengine qtwebchannel qtpositioning'
        cache: true
    
    - name: Setup Code Signing
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificate
        echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Verify certificate
        security find-identity -v -p codesigning
    
    - name: Build application
      run: |
        qmake6 -o Makefile cubit-quick.pro
        make -j$(sysctl -n hw.ncpu)
    
    - name: Sign application
      run: |
        # Remove any extended attributes that might interfere
        xattr -cr cubit-quick.app
        
        # Sign with hardened runtime for notarization
        if [ -f entitlements.plist ]; then
          ENTITLEMENTS="--entitlements entitlements.plist"
        else
          ENTITLEMENTS=""
        fi
        
        codesign --deep --force --verify --verbose \
          --sign "${{ secrets.APPLE_DEVELOPER_ID }}" \
          --options runtime \
          $ENTITLEMENTS \
          cubit-quick.app
        
        # Verify signature
        codesign --verify --deep --strict --verbose=2 cubit-quick.app
    
    - name: Package application
      run: |
        macdeployqt cubit-quick.app -dmg
        
        # Sign the DMG
        codesign --force --sign "${{ secrets.APPLE_DEVELOPER_ID }}" cubit-quick.dmg
    
    - name: Notarize application
      timeout-minutes: 180  # 3 hour timeout for the step itself
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Starting notarization process..."
        
        # Verify DMG exists and show info
        echo "DMG file info:"
        ls -la cubit-quick.dmg
        file cubit-quick.dmg
        
        # Submit for notarization and capture the submission ID
        echo "Submitting DMG for notarization..."
        SUBMISSION_OUTPUT=$(xcrun notarytool submit cubit-quick.dmg \
          --apple-id "$APPLE_ID" \
          --password "$APPLE_ID_PASSWORD" \
          --team-id "$APPLE_TEAM_ID" \
          --output-format json)
        
        echo "Submission output: $SUBMISSION_OUTPUT"
        
        # Extract submission ID
        SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | jq -r '.id')
        
        if [ -z "$SUBMISSION_ID" ] || [ "$SUBMISSION_ID" = "null" ]; then
          echo "Failed to get submission ID from notarytool"
          echo "Full output: $SUBMISSION_OUTPUT"
          exit 1
        fi
        
        echo "Submission ID: $SUBMISSION_ID"
        
        # Poll for notarization status with timeout
        START_TIME=$(date +%s)
        TIMEOUT=10800  # 3 hours in seconds
        POLL_INTERVAL=30  # Check every 30 seconds
        
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          if [ $ELAPSED -gt $TIMEOUT ]; then
            echo "Notarization timed out after $((ELAPSED / 60)) minutes"
            
            # Get the log for debugging
            echo "Fetching notarization log..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_ID_PASSWORD" \
              --team-id "$APPLE_TEAM_ID"
            
            exit 1
          fi
          
          echo "Checking notarization status (elapsed: $((ELAPSED / 60)) minutes)..."
          
          STATUS_OUTPUT=$(xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --output-format json)
          
          STATUS=$(echo "$STATUS_OUTPUT" | jq -r '.status')
          
          echo "Current status: $STATUS"
          
          case "$STATUS" in
            "Accepted")
              echo "Notarization succeeded!"
              break
              ;;
            "Rejected"|"Invalid")
              echo "Notarization failed with status: $STATUS"
              echo "Full status output: $STATUS_OUTPUT"
              
              # Get the log for debugging
              echo "Fetching notarization log..."
              xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID"
              
              exit 1
              ;;
            "In Progress")
              echo "Notarization still in progress..."
              sleep $POLL_INTERVAL
              ;;
            *)
              echo "Unknown status: $STATUS"
              echo "Full status output: $STATUS_OUTPUT"
              sleep $POLL_INTERVAL
              ;;
          esac
        done
        
        # Staple the notarization
        echo "Stapling notarization to DMG..."
        xcrun stapler staple cubit-quick.dmg
        
        # Verify the stapling
        echo "Verifying stapled DMG..."
        xcrun stapler validate cubit-quick.dmg
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-macos
        path: cubit-quick.dmg
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtwebengine qtwebchannel qtpositioning'
        cache: true
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Build application
      run: |
        qmake cubit-quick.pro
        nmake
    
    - name: Package application
      run: |
        windeployqt --release --dir deploy release\cubit-quick.exe
        copy release\cubit-quick.exe deploy\
    
    - name: Create installer (optional)
      run: |
        # You can add NSIS or other installer creation here
        # For now, we'll just package the deployed files
        Compress-Archive -Path deploy\* -DestinationPath cubit-windows.zip
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: cubit-windows
        path: cubit-windows.zip
        retention-days: 7

  create-release:
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Build ${{ github.run_number }}
        draft: false
        prerelease: true
        files: |
          artifacts/cubit-macos/cubit-quick.dmg
          artifacts/cubit-windows/cubit-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}